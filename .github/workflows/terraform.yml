name: 'Terraform CI/CD'

on:
  push:
    branches:
      - '**' # Trigger on pushes to all branches
    paths:
      - 'terraform/**.tf'
      - 'terraform/**.tfvars'

jobs:
  plan:
    name: 'Terraform Plan'
    if: github.ref != 'refs/heads/main'
    runs-on: ubuntu-latest
    # Set environment variables for the entire job
    env:
      OCI_TENANCY_OCID: ${{ secrets.OCI_TENANCY_OCID }}
      OCI_USER_OCID: ${{ secrets.OCI_USER_OCID }}
      OCI_FINGERPRINT: ${{ secrets.OCI_FINGERPRINT }}
      OCI_PRIVATE_KEY: ${{ secrets.OCI_PRIVATE_KEY }}

    steps:
      - name: 'Checkout'
        uses: actions/checkout@v4

      - name: 'Set up Terraform'
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: '1.5.0'

      - name: 'Terraform Init'
        working-directory: ./terraform/oci
        run: terraform init

      - name: 'Terraform Plan'
        working-directory: ./terraform/oci
        run: terraform plan -var="ssh_public_key=${{ secrets.SSH_PUBLIC_KEY }}" -no-color

  apply:
    name: 'Terraform Apply'
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    # Set environment variables for the entire job
    env:
      OCI_TENANCY_OCID: ${{ secrets.OCI_TENANCY_OCID }}
      OCI_USER_OCID: ${{ secrets.OCI_USER_OCID }}
      OCI_FINGERPRINT: ${{ secrets.OCI_FINGERPRINT }}
      OCI_PRIVATE_KEY: ${{ secrets.OCI_PRIVATE_KEY }}

    steps:
      - name: 'Checkout'
        uses: actions/checkout@v4

      - name: 'Set up Terraform'
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: '1.5.0'

      - name: 'Terraform Init'
        working-directory: ./terraform/oci
        run: terraform init

      - name: 'Terraform Apply'
        working-directory: ./terraform/oci
        run: terraform apply -auto-approve -var="ssh_public_key=${{ secrets.SSH_PUBLIC_KEY }}" -no-color