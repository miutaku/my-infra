---
name: Deploy to home k8s cluster

on:
  push:
    paths:
      - 'k8s/pve/**'

permissions:
  contents: read
  pull-requests: read

jobs:
  detect-changes:
    name: Detect k8s directory changes
    runs-on: ubuntu-latest
    outputs:
      changed_dirs: ${{ steps.get-dirs.outputs.dirs }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v44
        with:
          files: k8s/pve/**

      - name: Get unique directory names
        id: get-dirs
        run: |
          TARGET_DIRS=()
          for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
            d=$(dirname "$file")
            # Find the closest parent directory containing k8s manifests.
            while [[ "$d" != "." && "$d" != "/" ]]; do
              # Check for kustomization.yaml or any other .yaml/.yml files.
              if [[ -f "$d/kustomization.yaml" ]] || compgen -G "$d/*.yaml" > /dev/null || compgen -G "$d/*.yml" > /dev/null; then
                TARGET_DIRS+=("$d")
                break
              fi
              d=$(dirname "$d")
            done
          done

          # Get unique directories from the found list.
          UNIQUE_DIRS=$(printf "%s\n" "${TARGET_DIRS[@]}" | sort -u)
          echo "Unique directories with k8s manifests:"
          echo "$UNIQUE_DIRS"

          # Output the unique directories as a JSON array, handling the empty case.
          if [ -z "$UNIQUE_DIRS" ]; then
            echo "dirs=[]" >> $GITHUB_OUTPUT
          else
            echo "dirs=$(echo "$UNIQUE_DIRS" | jq -R . | jq -c -s .)" >> $GITHUB_OUTPUT
          fi

  deploy:
    name: Auto Deploy to k8s
    needs: detect-changes
    if: needs.detect-changes.outputs.changed_dirs != '[]'
    runs-on: ubuntu-latest
    env:
      SECRETS_JSON: ${{ toJSON(secrets) }}
    strategy:
      matrix:
        dir: ${{ fromJson(needs.detect-changes.outputs.changed_dirs) }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Tailscale
        uses: tailscale/github-action@v3
        with:
          oauth-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
          oauth-secret: ${{ secrets.TS_OAUTH_SECRET }}
          tags: tag:ci

      - name: Set up kubectl
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBECONFIG }}" > ~/.kube/config
          chmod 600 ~/.kube/config
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/

      - name: Create/update secrets from .secrets.env
        if: hashFiles(format('{0}/.secrets.env', matrix.dir)) != ''
        working-directory: ${{ matrix.dir }}
        run: |
          echo "Found .secrets.env, processing..."
          source .secrets.env

          if [ -z "$K8S_SECRET_NAME" ] || [ -z "$K8S_SECRET_NAMESPACE" ] || [ -z "$SECRET_MAPPING" ]; then
            echo "::error::.secrets.env is missing one or more required variables (K8S_SECRET_NAME, K8S_SECRET_NAMESPACE, SECRET_MAPPING)."
            exit 1
          fi

          CMD_LITERALS=""
          IFS=',' read -ra MAPPINGS <<< "$SECRET_MAPPING"
          for MAPPING in "${MAPPINGS[@]}"; do
            K8S_KEY=$(echo "$MAPPING" | cut -d'=' -f1)
            GITHUB_SECRET_NAME=$(echo "$MAPPING" | cut -d'=' -f2)

            SECRET_VALUE=$(echo "$SECRETS_JSON" | jq -r --arg key "$GITHUB_SECRET_NAME" '.[$key]')

            if [ -z "$SECRET_VALUE" ] || [ "$SECRET_VALUE" == "null" ]; then
              echo "::error::GitHub secret '$GITHUB_SECRET_NAME' defined in .secrets.env not found!"
              exit 1
            fi
            CMD_LITERALS="$CMD_LITERALS --from-literal=$K8S_KEY='$SECRET_VALUE'"
          done

          echo "Creating/updating secret '$K8S_SECRET_NAME' in namespace '$K8S_SECRET_NAMESPACE'."
          kubectl create secret generic "$K8S_SECRET_NAME" --namespace="$K8S_SECRET_NAMESPACE" $CMD_LITERALS --dry-run=client -o yaml | kubectl apply -f -

      - name: Diff and Apply Kubernetes manifests
        working-directory: ${{ matrix.dir }}
        run: |
          APPLY_ARGS=""
          if [ -f "kustomization.yaml" ]; then
            APPLY_ARGS="-k ."
          else
            APPLY_ARGS="-f ."
          fi

          # Show the diff. Exit code 1 means there is a diff, so we use || true.
          kubectl diff $APPLY_ARGS || true

          if [ "${{ github.ref_name }}" == "main" ]; then
            echo "Applying changes to main branch."
            kubectl apply $APPLY_ARGS
          else
            echo "Dry run for branch ${{ github.ref_name }}. No changes applied."
            kubectl apply $APPLY_ARGS --dry-run=server
          fi
